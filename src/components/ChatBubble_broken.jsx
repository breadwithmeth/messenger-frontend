import React from "react";
import { Box, Typography, Menu, MenuItem } from "@mui/material";

const API_URL_ROOT = (import.meta.env.VITE_SOCKET_URL || 'http://localhost:4000/').replace(/\/$/, '');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_COOLDOWN = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –≤ localStorage
const downloadAttempts = new Map();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ localStorage
const loadSavedAttempts = () => {
  try {
    const saved = localStorage.getItem('mediaDownloadAttempts');
    if (saved) {
      const parsed = JSON.parse(saved);
      Object.entries(parsed).forEach(([key, attempts]) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        const oneHourAgo = Date.now() - (60 * 60 * 1000);
        const recentAttempts = attempts.filter(attempt => attempt > oneHourAgo);
        if (recentAttempts.length > 0) {
          downloadAttempts.set(key, recentAttempts);
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ localStorage
const saveAttempts = () => {
  try {
    const attemptsObj = {};
    downloadAttempts.forEach((attempts, key) => {
      attemptsObj[key] = attempts;
    });
    localStorage.setItem('mediaDownloadAttempts', JSON.stringify(attemptsObj));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫:', error);
  }
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
loadSavedAttempts();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ–¥–∏–∞
window.setAutoLoadMedia = (enabled) => {
  localStorage.setItem('autoLoadMedia', enabled.toString());
  console.log(`–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
const getAutoLoadSetting = () => {
  const setting = localStorage.getItem('autoLoadMedia');
  return setting === 'true'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
window.resetMediaLimits = () => {
  downloadAttempts.clear();
  localStorage.removeItem('mediaDownloadAttempts');
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  window.location.reload();
  console.log('–í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
window.showMediaCommands = () => {
  console.log(`
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞:

üîÑ resetMediaLimits() - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
‚öôÔ∏è setAutoLoadMedia(true/false) - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞
üìä showMediaCommands() - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞: ${getAutoLoadSetting() ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${downloadAttempts.size}
  `);
};

const MediaContent = ({ message }) => {
  const [loadError, setLoadError] = React.useState(false);
  const [retryCount, setRetryCount] = React.useState(0);
  const [isBlocked, setIsBlocked] = React.useState(false);
  const [userRequestedLoad, setUserRequestedLoad] = React.useState(false);
  const [autoLoadEnabled, setAutoLoadEnabled] = React.useState(getAutoLoadSetting());

  if (!message.mediaUrl || !message.mimeType) {
    return null;
  }

  const fullMediaUrl = `${API_URL_ROOT}${message.mediaUrl}`;
  const mediaKey = `${message.id}_${message.mediaUrl}`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  React.useEffect(() => {
    const autoLoad = getAutoLoadSetting();
    setAutoLoadEnabled(autoLoad);
    if (autoLoad) {
      setUserRequestedLoad(true);
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const checkRetryLimits = React.useCallback(() => {
    const now = Date.now();
    const attempts = downloadAttempts.get(mediaKey) || [];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    const recentAttempts = attempts.filter(attempt => now - attempt < RETRY_COOLDOWN);
    
    if (recentAttempts.length >= MAX_RETRY_ATTEMPTS) {
      setIsBlocked(true);
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setIsBlocked(false);
        downloadAttempts.set(mediaKey, []);
      }, RETRY_COOLDOWN);
      return false;
    }
    
    return true;
  }, [mediaKey]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleLoadError = React.useCallback(() => {
    const now = Date.now();
    const attempts = downloadAttempts.get(mediaKey) || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
    attempts.push(now);
    downloadAttempts.set(mediaKey, attempts);
    saveAttempts(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    
    setLoadError(true);
    setRetryCount(prev => prev + 1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (!checkRetryLimits()) {
      console.warn(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞: ${mediaKey}`);
    }
  }, [mediaKey, checkRetryLimits]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const handleLoadSuccess = React.useCallback(() => {
    setLoadError(false);
    setRetryCount(0);
    // –û—á–∏—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    downloadAttempts.delete(mediaKey);
    saveAttempts(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  }, [mediaKey]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞
  const handleLoadMedia = React.useCallback(() => {
    if (isBlocked) {
      alert(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ (${MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      return;
    }
    setUserRequestedLoad(true);
  }, [isBlocked]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  React.useEffect(() => {
    if (userRequestedLoad) {
      console.log('User requested to load media from URL:', fullMediaUrl);
    }
  }, [userRequestedLoad, fullMediaUrl]);
  
  React.useEffect(() => {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const attempts = downloadAttempts.get(mediaKey) || [];
    if (attempts.length > 0) {
      console.log(`Media file ${mediaKey} has ${attempts.length} download attempts:`, attempts.map(a => new Date(a).toLocaleTimeString()));
    }
  }, [mediaKey]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
  const showRetryInfo = loadError && retryCount > 0 && retryCount < MAX_RETRY_ATTEMPTS;

  const retryInfoComponent = showRetryInfo ? (
    <Box sx={{ mt: message.content ? 1 : 0, mb: 1, p: 1, bgcolor: '#fff3e0', border: '1px solid #ff9800' }}>
      <Typography variant="caption" sx={{ fontSize: '0.7rem', color: '#f57c00' }}>
        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—ã—Ç–∫–∞ {retryCount}/{MAX_RETRY_ATTEMPTS}
      </Typography>
    </Box>
  ) : null;

  if (message.mimeType.startsWith('image/')) {
    if (isBlocked) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          </Typography>
        </Box>
      );
    }

    if (loadError && retryCount >= MAX_RETRY_ATTEMPTS) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ {MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫
          </Typography>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
            –§–∞–π–ª: {message.filename || 'image'}
          </Typography>
        </Box>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (!userRequestedLoad) {
      return (
        <>
          {retryInfoComponent}
          <Box
            onClick={handleLoadMedia}
            sx={{
              mt: retryInfoComponent ? 0 : (message.content ? 1 : 0),
              p: 2,
              bgcolor: '#f5f5f5',
              border: '2px dashed #ccc',
              borderRadius: 0,
              cursor: 'pointer',
              textAlign: 'center',
              '&:hover': {
                bgcolor: '#eeeeee',
                borderColor: '#2196F3',
              }
            }}
          >
            <Typography variant="body2" sx={{ color: '#666', fontSize: '0.9rem' }}>
              üñºÔ∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </Typography>
            <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
              {message.filename || 'image'}
            </Typography>
          </Box>
        </>
      );
    }

    return (
      <>
        {retryInfoComponent}
        <Box
          component="img"
          src={fullMediaUrl}
          alt={message.filename || 'image'}
          onLoad={handleLoadSuccess}
          onError={handleLoadError}
          sx={{
            maxWidth: '100%',
            maxHeight: '300px',
            borderRadius: 0, // Swiss style: no rounded corners
            mt: retryInfoComponent ? 0 : (message.content ? 1 : 0),
            cursor: 'pointer',
            opacity: loadError ? 0.5 : 1,
            filter: loadError ? 'grayscale(100%)' : 'none',
          }}
          onClick={() => !loadError && window.open(fullMediaUrl, '_blank')}
        />
      </>
    );
  }

  if (message.mimeType.startsWith('video/')) {
    if (isBlocked) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ ({MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          </Typography>
        </Box>
      );
    }

    if (loadError && retryCount >= MAX_RETRY_ATTEMPTS) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ {MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫
          </Typography>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
            –§–∞–π–ª: {message.filename || 'video'}
          </Typography>
        </Box>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (!userRequestedLoad) {
      return (
        <Box
          onClick={handleLoadMedia}
          sx={{
            mt: message.content ? 1 : 0,
            p: 2,
            bgcolor: '#f5f5f5',
            border: '2px dashed #ccc',
            borderRadius: 0,
            cursor: 'pointer',
            textAlign: 'center',
            '&:hover': {
              bgcolor: '#eeeeee',
              borderColor: '#2196F3',
            }
          }}
        >
          <Typography variant="body2" sx={{ color: '#666', fontSize: '0.9rem' }}>
            üé• –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
          </Typography>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
            {message.filename || 'video'}
          </Typography>
        </Box>
      );
    }

    return (
      <Box
        component="video"
        controls
        src={fullMediaUrl}
        onLoadedData={handleLoadSuccess}
        onError={handleLoadError}
        sx={{
          maxWidth: '100%',
          maxHeight: '300px',
          borderRadius: 0, // Swiss style: no rounded corners
          mt: message.content ? 1 : 0,
          opacity: loadError ? 0.5 : 1,
          filter: loadError ? 'grayscale(100%)' : 'none',
        }}
      />
    );
  }
  
  if (message.mimeType.startsWith('audio/')) {
    if (isBlocked) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ ({MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          </Typography>
        </Box>
      );
    }

    if (loadError && retryCount >= MAX_RETRY_ATTEMPTS) {
      return (
        <Box sx={{ mt: message.content ? 1 : 0, p: 2, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="body2" color="error" sx={{ fontSize: '0.8rem' }}>
            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –ø–æ—Å–ª–µ {MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫
          </Typography>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
            –§–∞–π–ª: {message.filename || 'audio'}
          </Typography>
        </Box>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (!userRequestedLoad) {
      return (
        <Box
          onClick={handleLoadMedia}
          sx={{
            mt: message.content ? 1 : 0,
            p: 2,
            bgcolor: '#f5f5f5',
            border: '2px dashed #ccc',
            borderRadius: 0,
            cursor: 'pointer',
            textAlign: 'center',
            '&:hover': {
              bgcolor: '#eeeeee',
              borderColor: '#2196F3',
            }
          }}
        >
          <Typography variant="body2" sx={{ color: '#666', fontSize: '0.9rem' }}>
            üéµ –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
          </Typography>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', opacity: 0.7 }}>
            {message.filename || 'audio'}
          </Typography>
        </Box>
      );
    }

    return (
      <Box
        component="audio"
        controls
        src={fullMediaUrl}
        onLoadedData={handleLoadSuccess}
        onError={handleLoadError}
        sx={{
          width: '100%',
          mt: message.content ? 1 : 0,
          opacity: loadError ? 0.5 : 1,
          filter: loadError ? 'grayscale(100%)' : 'none',
        }}
      />
    );
  }

  // Fallback for other file types
  const [downloadError, setDownloadError] = React.useState(false);
  const [downloadAttemptCount, setDownloadAttemptCount] = React.useState(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  React.useEffect(() => {
    const attempts = downloadAttempts.get(mediaKey) || [];
    const recentAttempts = attempts.filter(attempt => Date.now() - attempt < RETRY_COOLDOWN);
    setDownloadAttemptCount(recentAttempts.length);
    if (recentAttempts.length >= 2) {
      setDownloadError(true);
    }
  }, [mediaKey]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
  const checkFileAvailability = React.useCallback(async (url) => {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      return response.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞:', error);
      return false;
    }
  }, []);

  const handleFileDownload = React.useCallback(async (e) => {
    e.preventDefault();

    if (isBlocked) {
      alert(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (${MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ 2 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∏, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    if (downloadAttemptCount >= 2) {
      setDownloadError(true);
      alert('–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.');
      return;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    setDownloadAttemptCount(prev => prev + 1);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const now = Date.now();
    const attempts = downloadAttempts.get(mediaKey) || [];
    attempts.push(now);
    downloadAttempts.set(mediaKey, attempts);
    saveAttempts(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
    const isFileAvailable = await checkFileAvailability(fullMediaUrl);
    
    if (!isFileAvailable) {
      setDownloadError(true);
      console.error('–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', fullMediaUrl);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
      if (downloadAttemptCount >= 1) {
        alert('–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.');
        return;
      } else {
        alert('–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
    }

    // –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    window.open(fullMediaUrl, '_blank');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    setDownloadError(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏
    if (!checkRetryLimits()) {
      alert(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (${MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥).`);
    }
  }, [isBlocked, mediaKey, checkRetryLimits, fullMediaUrl, downloadAttemptCount, checkFileAvailability]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª
  const isFileBlocked = isBlocked || downloadAttemptCount >= 2;

  return (
    <Box sx={{ mt: message.content ? 1 : 0 }}>
      {downloadError && downloadAttemptCount >= 2 && (
        <Box sx={{ mb: 1, p: 1, bgcolor: '#ffebee', border: '1px solid #f44336' }}>
          <Typography variant="caption" sx={{ fontSize: '0.7rem', color: '#f44336' }}>
            ‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫
          </Typography>
        </Box>
      )}
      
      <a 
        href="#"
        onClick={handleFileDownload}
        style={{ 
          color: 'inherit',
          textDecoration: isFileBlocked ? 'line-through' : 'underline',
          opacity: isFileBlocked ? 0.5 : 1,
          pointerEvents: isFileBlocked ? 'none' : 'auto'
        }}
      >
        <Typography 
          variant="body2"
          sx={{
            color: isFileBlocked ? '#f44336' : 'inherit'
          }}
        >
          {isFileBlocked 
            ? `üö´ –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${downloadAttemptCount} –ø–æ–ø—ã—Ç–æ–∫)` 
            : `üìé ${message.filename || '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'}`
          }
        </Typography>
      </a>
      
      {downloadAttemptCount > 0 && downloadAttemptCount < 2 && downloadError && (
        <Typography variant="caption" sx={{ fontSize: '0.7rem', color: '#ff9800', display: 'block' }}>
          ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {downloadAttemptCount}/2 –Ω–µ—É–¥–∞—á–Ω–∞
        </Typography>
      )}
      
      {isFileBlocked && (
        <Typography variant="caption" sx={{ fontSize: '0.7rem', color: '#f44336', display: 'block' }}>
          –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        </Typography>
      )}
    </Box>
  );
};


export default React.memo(function ChatBubble({ message, isMe, showTime }) {
  const [contextMenu, setContextMenu] = React.useState(null);

  const handleContextMenu = (event) => {
    event.preventDefault();
    setContextMenu(
      contextMenu === null
        ? {
            mouseX: event.clientX + 2,
            mouseY: event.clientY - 6,
          }
        : // repeated contextmenu when it is already open closes it with Chrome 84 on Ubuntu
          // Other browsers might not behave the same.
          // With this behavior we prevent contextmenu from appearing again.
          null,
    );
  };

  const handleClose = () => {
    setContextMenu(null);
  };

  const handleDebugMessage = () => {
    console.log('DEBUG MESSAGE:', message);
    alert('–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
    handleClose();
  };

  return (
    <Box
      onContextMenu={handleContextMenu}
      sx={{
        maxWidth: '75%',
        minWidth: '60px',
        p: '1rem 1.5rem',
        mb: '0.5rem',
        borderRadius: 0, // Swiss style: rectangular bubbles
        boxShadow: 'none',
        fontSize: '1rem',
        lineHeight: 1.5,
        whiteSpace: 'pre-wrap',
        wordBreak: 'break-word',
        position: 'relative',
        transition: 'box-shadow 0.2s ease', // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        alignSelf: isMe ? 'flex-end' : 'flex-start',
        bgcolor: isMe ? '#1976D2' : '#FFFFFF',
        color: isMe ? '#FFFFFF' : '#212121',
        border: isMe ? '2px solid #1976D2' : '2px solid #E0E0E0',
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
        '&:hover': {
          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
        }
      }}
    >
      {/* –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ bubble, 
          —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ ChatMessages */}
      
      {message.quotedContent && (
        <Box
          sx={{
            p: 1.5,
            mb: 1,
            bgcolor: isMe ? 'rgba(255,255,255,0.15)' : '#F5F5F5',
            borderRadius: 0, // Swiss style: rectangular quotes
            borderLeft: '4px solid',
            borderColor: isMe ? 'rgba(255,255,255,0.8)' : '#2196F3',
          }}
        >
          <Typography 
            variant="body2" 
            sx={{ 
              opacity: 0.9, 
              wordBreak: 'break-all',
              fontStyle: 'italic',
              color: isMe ? '#FFFFFF' : '#424242',
              fontSize: '0.9rem',
              fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
            }}
          >
            {message.quotedContent}
          </Typography>
        </Box>
      )}
      <MediaContent message={message} />
      <Typography 
        variant="body1" 
        component="div" 
        sx={{ 
          fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
          fontSize: '1rem',
          lineHeight: 1.5,
          color: isMe ? '#FFFFFF' : '#212121'
        }}
      >
        {message.content}
      </Typography>
      {showTime && message.timestamp && (
        <Typography
          variant="caption"
          sx={{
            display: 'block',
            textAlign: 'right',
            fontSize: '0.75rem',
            mt: 1.5,
            opacity: 0.8,
            fontFamily: '"Roboto Mono", "Courier New", monospace', // Swiss style: monospace for time
            letterSpacing: '0.5px',
            color: isMe ? '#E3F2FD' : '#757575',
            fontWeight: 500
          }}
        >
          {new Date(message.timestamp).toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit',
            second: '2-digit'
          })}
        </Typography>
      )}
      <Menu
        open={contextMenu !== null}
        onClose={handleClose}
        anchorReference="anchorPosition"
        anchorPosition={
          contextMenu !== null
            ? { top: contextMenu.mouseY, left: contextMenu.mouseX }
            : undefined
        }
      >
        <MenuItem onClick={handleDebugMessage}>–í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å</MenuItem>
      </Menu>
    </Box>
  );
});
        }
      >
        <MenuItem onClick={handleDebugMessage}>–í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å</MenuItem>
      </Menu>
    </Box>
  );
}
