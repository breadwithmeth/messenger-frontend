import React, { useEffect, useState, useRef, useMemo, useCallback, useDeferredValue, useTransition } from "react";
import { useTheme } from "@mui/material/styles";
import {
  Box,
  Typography,
  CircularProgress,
  Fade,
  Button,
} from "@mui/material";
import api from "../api";
import ChatSidebar from "../components/ChatSidebar";
import ChatInfoSidebar from "../components/ChatInfoSidebar";
import ChatBubble from "../components/ChatBubble"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import MessageGroupHeader from "../components/MessageGroupHeader";
import TopBar from "../components/TopBar";
import { useOptimizedInput } from "../hooks/useOptimizedInput";
import ChatInput from "../components/ChatInput";
import { areMessagesEqual } from "../utils/messageComparison";


function ChatMessages({ messages, userId, loading, isFirstLoad, onFirstLoadComplete }) {
  const theme = useTheme();
  const containerRef = useRef(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useDeferredValue –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const deferredMessages = useDeferredValue(messages);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
  const findQuotedMessageContent = useCallback((quotedId) => {
    if (!quotedId || !deferredMessages) return null;
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á–µ–π whatsappMessageId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å quotedId
    const quotedMsg = deferredMessages.find(m => m.whatsappMessageId === quotedId);
    if (!quotedMsg) return null;

    if (quotedMsg.content) {
      return quotedMsg.content;
    }
    if (quotedMsg.mimeType) {
      if (quotedMsg.mimeType.startsWith('image/')) return 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      if (quotedMsg.mimeType.startsWith('video/')) return 'üìπ –í–∏–¥–µ–æ';
      if (quotedMsg.mimeType.startsWith('audio/')) return 'üéµ –ê—É–¥–∏–æ';
      return `üìÑ ${quotedMsg.filename || '–§–∞–π–ª'}`;
    }
    return null;
  }, [deferredMessages]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º
  const { grouped, dates } = useMemo(() => {
    const groupByDate = (msgs) => {
      const groups = {};
      msgs.forEach(msg => {
        if (!msg.timestamp) return;
        
        const messageDate = new Date(msg.timestamp);
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        let dateKey;
        if (messageDate.toDateString() === today.toDateString()) {
          dateKey = '–°–µ–≥–æ–¥–Ω—è';
        } else if (messageDate.toDateString() === yesterday.toDateString()) {
          dateKey = '–í—á–µ—Ä–∞';
        } else if (messageDate.getFullYear() === today.getFullYear()) {
          // –≠—Ç–æ—Ç –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
          dateKey = messageDate.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long' 
          });
        } else {
          // –î—Ä—É–≥–æ–π –≥–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
          dateKey = messageDate.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric' 
          });
        }
        
        if (!groups[dateKey]) groups[dateKey] = [];
        groups[dateKey].push(msg);
      });
      return groups;
    };
    
    const grouped = groupByDate(deferredMessages);
    const dates = Object.keys(grouped).sort((a, b) => {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç
      const getDateValue = (dateStr) => {
        if (dateStr === '–°–µ–≥–æ–¥–Ω—è') return new Date().getTime();
        if (dateStr === '–í—á–µ—Ä–∞') {
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          return yesterday.getTime();
        }
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        const firstMsg = grouped[dateStr]?.[0];
        return firstMsg?.timestamp ? new Date(firstMsg.timestamp).getTime() : 0;
      };
      return getDateValue(a) - getDateValue(b);
    });
    
    return { grouped, dates };
  }, [deferredMessages]);
  
  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (containerRef.current && isFirstLoad && deferredMessages.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        if (containerRef.current) {
          containerRef.current.scrollTo({
            top: containerRef.current.scrollHeight,
            behavior: 'smooth'
          });
          onFirstLoadComplete();
        }
      }, 100);
    }
  }, [deferredMessages, isFirstLoad, onFirstLoadComplete]);

  if (loading) {
    return (
      <Box
        sx={{
          flex: 1,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          bgcolor: 'transparent'
        }}
      >
        <Fade in={loading} style={{ transitionDelay: '300ms' }}>
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column', 
            alignItems: 'center', 
            gap: 2 
          }}>
            <CircularProgress sx={{ color: '#2196F3' }} />
            <Typography 
              variant="body2" 
              sx={{ 
                color: '#757575',
                fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
              }}
            >
              –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...
            </Typography>
          </Box>
        </Fade>
      </Box>
    );
  }
  return (
    <Box
      ref={containerRef}
      sx={{
        flex: 1,
        p: 3,
        overflowY: 'auto',
        display: 'flex',
        flexDirection: 'column',
        bgcolor: 'background.default'
      }}
    >
      {dates.map(date => (
        <React.Fragment key={date}>
          <Typography
            key={`date-header-${date}`}
            variant="body2"
            component="div"
            align="center"
            sx={{ 
              my: 3,
              py: 1.5,
              px: 3,
              backgroundColor: '#F5F5F5',
              color: '#333333',
              fontWeight: 600,
              textTransform: 'uppercase',
              letterSpacing: '0.1em',
              fontSize: '0.8rem',
              borderRadius: 0, // Swiss style
              border: '1px solid #D0D0D0',
              maxWidth: 250,
              mx: 'auto',
              fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
              opacity: 0,
              transform: 'translateY(20px)',
              animation: 'fadeInUp 0.6s ease-out forwards',
              '@keyframes fadeInUp': {
                'to': {
                  opacity: 1,
                  transform: 'translateY(0)',
                },
              },
            }}
          >
            {date}
          </Typography>
          {grouped[date].map((msg, index) => {
            // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç quotedContent, –Ω–æ –µ—Å—Ç—å quotedMessageId, –∏—â–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
            const finalQuotedContent = msg.quotedContent || findQuotedMessageContent(msg.quotedMessageId);
            const messageWithQuote = { ...msg, quotedContent: finalQuotedContent };

            const prevMsg = index > 0 ? grouped[date][index - 1] : null;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            const showSenderInfo = msg.fromMe && msg.senderUser && (
              !prevMsg || 
              !prevMsg.fromMe || 
              prevMsg.senderUserId !== msg.senderUserId ||
              (new Date(msg.timestamp) - new Date(prevMsg.timestamp)) > 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
            );

            return (
              <React.Fragment key={`msg-fragment-${msg.id}`}>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
                {showSenderInfo && (
                  <MessageGroupHeader 
                    key={`header-${msg.id}`}
                    senderUser={msg.senderUser} 
                    timestamp={msg.timestamp}
                  />
                )}
                <ChatBubble 
                  key={`bubble-${msg.id}`}
                  message={messageWithQuote} 
                  isMe={msg.fromMe}
                  showTime={true}
                />
              </React.Fragment>
            );
          })}
        </React.Fragment>
      ))}
    </Box>
  );
}



export default function Messenger({ onLogout }) {
  const theme = useTheme();
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [sending, setSending] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isRewriting, setIsRewriting] = useState(false);
  const [phoneInfo, setPhoneInfo] = useState(null);
  const [phoneInfoLoading, setPhoneInfoLoading] = useState(false);
  const [isFirstMessageLoad, setIsFirstMessageLoad] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  
  // –î–æ–±–∞–≤–ª—è–µ–º useTransition –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const [isPending, startTransition] = useTransition();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = await api.getCurrentUser();
        setCurrentUser(user);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    };

    fetchCurrentUser();
  }, []);

  useEffect(() => {
    let isMounted = true;
    const fetchChats = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        const data = await api.getMyAssignedChats();
        const recieved_chats = Array.isArray(data.chats) ? data.chats : []; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤ —á–∞—Ç–æ–≤
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        const sorted = Array.isArray(recieved_chats) ? [...recieved_chats].sort((a, b) => {
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Ç–≤–µ—Ç–∞ (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
          const aIsUnread = a.lastMessage && !a.lastMessage.fromMe;
          const bIsUnread = b.lastMessage && !b.lastMessage.fromMe;
          
          if (aIsUnread && !bIsUnread) return -1;
          if (!aIsUnread && bIsUnread) return 1;
          
          // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
          const getTime = chat => {
            const timestamp = chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt;
            return timestamp ? new Date(timestamp).getTime() : 0;
          };
          return getTime(b) - getTime(a);
        }) : [];
        
        if (isMounted) {
          setChats(sorted);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:", error);
        
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã');
        }
      }
    };
    fetchChats();
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    const interval = setInterval(fetchChats, 10000);
    return () => { isMounted = false; clearInterval(interval); };
  }, [selectedChat]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ TopBar)
  const handleChatUpdated = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const data = await api.getMyAssignedChats();
      const recieved_chats = Array.isArray(data.chats) ? data.chats : [];
      
      const sorted = Array.isArray(recieved_chats) ? [...recieved_chats].sort((a, b) => {
        const aIsUnread = a.lastMessage && !a.lastMessage.fromMe;
        const bIsUnread = b.lastMessage && !b.lastMessage.fromMe;
        
        if (aIsUnread && !bIsUnread) return -1;
        if (!aIsUnread && bIsUnread) return 1;
        
        const getTime = chat => {
          const timestamp = chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt;
          return timestamp ? new Date(timestamp).getTime() : 0;
        };
        return getTime(b) - getTime(a);
      }) : [];
      
      setChats(sorted);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º selectedChat, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (selectedChat) {
        const updatedSelectedChat = sorted.find(chat => chat.id === selectedChat.id);
        if (updatedSelectedChat) {
          setSelectedChat(updatedSelectedChat);
        }
      }
    } catch (error) {
      console.error("Error updating chats:", error);
    }
  };

  useEffect(() => {
    if (!selectedChat) return;
    let isMounted = true;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
    setLoading(true);
    
    const fetchMessages = async (isInitial = false) => {
      try {
        const data = await api.getMessagesByChatId(selectedChat.id);
        console.log('Fetched messages:', data);
        let msgs = Array.isArray(data) ? data : data.messages;
        msgs = msgs.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        
        if (isMounted) {
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º startTransition –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
          startTransition(() => {
            setMessages(prevMessages => {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
              if (areMessagesEqual(prevMessages, msgs)) {
                return prevMessages; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
              }
              
              return msgs; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            });
          });
          
          // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          if (isInitial) {
            setLoading(false);
            // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            api.markChatAsRead(selectedChat.id).catch(error => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
            });
          }
        }
      } catch {
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
          if (isInitial) {
            setLoading(false);
          }
        }
      }
    };

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    fetchMessages(true);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
    const interval = setInterval(() => {
      fetchMessages(false);
    }, 10000);
    
    return () => { 
      isMounted = false; 
      clearInterval(interval); 
    };
  }, [selectedChat]);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const {
    value: message,
    deferredValue: deferredMessage,
    isPending: isInputPending,
    handleChange: handleInputChange,
    setValue: setMessage
  } = useOptimizedInput('', {
    debounceDelay: 150,
    enableTransition: true
  });

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º)
  const memoizedMessages = useMemo(() => {
    return messages; // –ü—Ä–æ—Å—Ç–æ–µ –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫
  }, [messages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
  useEffect(() => {
    if (!selectedChat) {
      setPhoneInfo(null);
      return;
    }

    let isMounted = true;

    const fetchPhoneInfo = async () => {
      try {
        setPhoneInfoLoading(true);
        const phones = await api.getOrganizationPhones();
        const phoneId = selectedChat.organizationPhone?.id || selectedChat.organizationPhoneId;
        const phone = phones.find(p => p.id === phoneId);
        if (isMounted) {
          if (phone) {
            setPhoneInfo(phone);
          }
          setPhoneInfoLoading(false);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:', err);
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
          setPhoneInfoLoading(false);
        }
      }
    };

    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    fetchPhoneInfo();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchPhoneInfo, 10000);

    return () => {
      isMounted = false;
      clearInterval(interval);
    };
  }, [selectedChat]);

  const handleRewrite = async (options) => {
    const { text, tone, style, length } = options;
    if (!text) return;

    setIsRewriting(true);
    try {
      const geminiApiKey = localStorage.getItem('gemini_api_key');
      if (!geminiApiKey) {
        alert('API –∫–ª—é—á –¥–ª—è Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        setIsRewriting(false);
        return;
      }
      const rewrittenText = await api.rewriteWithGemini(text, tone, style, length);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setValue –∏–∑ —Ö—É–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      setMessage(rewrittenText);
      alert('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω!');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
      if (error.message && error.message.includes('429')) {
          alert('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç.');
      }
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
      setMessage(text);
    } finally {
      setIsRewriting(false);
    }
  };

  const handleSendMessage = async (msg) => {
    if (!msg.trim() || !selectedChat) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
    if (!canWriteToChat(selectedChat, currentUser)) {
      alert('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ß–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    setSending(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const organizationPhoneId = selectedChat.organizationPhone?.id || selectedChat.organizationPhoneId;
      const receiverJid = selectedChat.remoteJid;
      
      if (!organizationPhoneId || !receiverJid) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const sentMessage = await api.sendTextMessage({ 
        organizationPhoneId, 
        receiverJid, 
        text: msg 
      });
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º transition –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      startTransition(() => {
        setMessages(prev => [...prev, sentMessage]);
      });
      
      // –û—á–∏—â–∞–µ–º input —á–µ—Ä–µ–∑ —Ö—É–∫
      setMessage('');

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (selectedChat.id) {
        api.markChatAsRead(selectedChat.id).catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const updatedChats = await api.getMyAssignedChats();
      const sorted = [...(updatedChats.chats || [])].sort((a, b) => {
        const getTime = chat => chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt || 0;
        return new Date(getTime(b)) - new Date(getTime(a));
      });
      
      startTransition(() => {
        setChats(sorted);
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } finally {
      setSending(false);
    }
  };

  const handleSendMedia = async (file, mediaType, caption = '') => {
    if (!selectedChat) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
    if (!canWriteToChat(selectedChat, currentUser)) {
      alert('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ß–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    try {
      console.log('Sending media file:', file.name, 'to chat:', selectedChat.id, 'type:', mediaType);
      
      await api.sendMediaMessage({
        chatId: selectedChat.id,
        file,
        mediaType,
        caption
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updatedMessages = await api.getMessagesByChatId(selectedChat.id);
      const msgs = Array.isArray(updatedMessages) ? updatedMessages : (updatedMessages?.messages || []);
      setMessages(msgs);

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      if (selectedChat.id) {
        api.markChatAsRead(selectedChat.id).catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      const updatedChats = await api.getMyAssignedChats();
      const receivedChats = Array.isArray(updatedChats.chats) ? updatedChats.chats : [];
      const sorted = [...receivedChats].sort((a, b) => {
        const getTime = chat => chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt || 0;
        return new Date(getTime(b)) - new Date(getTime(a));
      });
      setChats(sorted);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:", error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç
  const canWriteToChat = (chat, user) => {
    if (!chat || !user) return false;
    
    // –ï—Å–ª–∏ —É —á–∞—Ç–∞ –Ω–µ—Ç assignedUser, –∑–Ω–∞—á–∏—Ç —á–∞—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏ –≤ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å
    if (!chat.assignedUser) return true;
    
    // –ï—Å–ª–∏ —á–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (chat.assignedUser.id === user.id) return true;

    // –ò–Ω–∞—á–µ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å
    return false;
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleFirstLoadComplete = useCallback(() => {
    setIsFirstMessageLoad(false);
  }, []);

  const handleSelectChat = (chat) => {
    setSelectedChat(chat);
    setIsFirstMessageLoad(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    if (chat.id) {
      api.markChatAsRead(chat.id).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
      });
    }
  };

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSX –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  return (
    <Box sx={{ display: 'flex', height: '100vh', bgcolor: 'background.default' }}>
      <ChatSidebar
        chats={chats}
        selectedChat={selectedChat}
        onSelect={handleSelectChat}
      />
      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', height: '100vh' }}>
        <TopBar 
          onLogout={onLogout} 
          selectedChat={selectedChat}
          onChatUpdated={handleChatUpdated}
        />
        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'row', overflow: 'hidden' }}>
          <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', bgcolor: 'background.default' }}>
            {selectedChat ? (
              <>
                <ChatMessages
                  messages={memoizedMessages}
                  userId={currentUser?.id || null}
                  loading={loading}
                  isFirstLoad={isFirstMessageLoad}
                  onFirstLoadComplete={handleFirstLoadComplete}
                />
                <ChatInput
                  onSend={handleSendMessage}
                  disabled={sending || isRewriting || !canWriteToChat(selectedChat, currentUser)}
                  onRewrite={handleRewrite}
                  isRewriting={isRewriting}
                  onMediaSend={handleSendMedia}
                />
                {selectedChat && currentUser && !canWriteToChat(selectedChat, currentUser) && (
                  <Box sx={{ 
                    p: 3, 
                    bgcolor: '#FFF3E0', 
                    borderTop: '3px solid #FF9800',
                    borderBottom: '1px solid #FFB74D'
                  }}>
                    <Typography 
                      variant="body1" 
                      sx={{ 
                        color: '#E65100',
                        fontWeight: 500,
                        textAlign: 'center',
                        fontSize: '0.95rem',
                        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
                      }}
                    >
                      –≠—Ç–æ—Ç —á–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ({selectedChat.assignedUser?.email}). 
                      –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å —á–∞—Ç.
                    </Typography>
                  </Box>
                )}
              </>
            ) : (
              <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                <Typography 
                  variant="h5" 
                  sx={{ 
                    color: '#616161',
                    fontWeight: 400,
                    fontSize: '1.25rem',
                    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
                  }}
                >
                  –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
                </Typography>
              </Box>
            )}
          </Box>
          <ChatInfoSidebar chat={selectedChat} phoneInfo={phoneInfo} loading={phoneInfoLoading} />
        </Box>
      </Box>
    </Box>
  );
}
