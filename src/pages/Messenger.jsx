import React, { useEffect, useState, useRef } from "react";
import { useTheme } from "@mui/material/styles";
import {
  Box,
  Typography,
  TextField,
  CircularProgress,
  Fade,
  Menu,
  MenuItem,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Button,
  FormControl,
  InputLabel,
  Select,
} from "@mui/material";
import api from "../api";
import ChatSidebar from "../components/ChatSidebar";
import ChatInfoSidebar from "../components/ChatInfoSidebar";
import ChatBubble from "../components/ChatBubble"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import TopBar from "../components/TopBar";

function ChatMessages({ messages, userId, loading }) {
  const theme = useTheme();
  const containerRef = useRef(null);

  useEffect(() => {
    if (containerRef.current) {
      // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
      containerRef.current.scrollTo({
        top: containerRef.current.scrollHeight,
        behavior: 'smooth'
      });
    }
  }, [messages]);

  const scrollToBottom = () => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  if (loading) {
    return (
      <Box
        sx={{
          flex: 1,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          bgcolor: 'transparent'
        }}
      >
        <Fade in={loading} style={{ transitionDelay: '500ms' }}>
          <CircularProgress />
        </Fade>
      </Box>
    );
  }

  const findQuotedMessageContent = (quotedId) => {
    if (!quotedId || !messages) return null;
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á–µ–π whatsappMessageId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å quotedId
    const quotedMsg = messages.find(m => m.whatsappMessageId === quotedId);
    if (!quotedMsg) return null;

    if (quotedMsg.content) {
      return quotedMsg.content;
    }
    if (quotedMsg.mimeType) {
      if (quotedMsg.mimeType.startsWith('image/')) return 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      if (quotedMsg.mimeType.startsWith('video/')) return 'üìπ –í–∏–¥–µ–æ';
      if (quotedMsg.mimeType.startsWith('audio/')) return 'üéµ –ê—É–¥–∏–æ';
      return `üìÑ ${quotedMsg.filename || '–§–∞–π–ª'}`;
    }
    return null;
  };

  const groupByDate = (msgs) => {
    const groups = {};
    msgs.forEach(msg => {
      const date = msg.timestamp ? new Date(msg.timestamp).toLocaleDateString() : '';
      if (!groups[date]) groups[date] = [];
      groups[date].push(msg);
    });
    return groups;
  };
  const grouped = groupByDate(messages);
  const dates = Object.keys(grouped).sort((a, b) => new Date(a) - new Date(b));
  return (
    <Box
      ref={containerRef}
      sx={{
        flex: 1,
        p: 3,
        overflowY: 'auto',
        display: 'flex',
        flexDirection: 'column',
        bgcolor: 'background.default'
      }}
    >
      {dates.map(date => (
        <React.Fragment key={date}>
          <Typography
            variant="caption"
            component="div"
            align="center"
            color="text.secondary"
            sx={{ my: 2 }}
          >
            {date}
          </Typography>
          {grouped[date].map(msg => {
            // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç quotedContent, –Ω–æ –µ—Å—Ç—å quotedMessageId, –∏—â–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
            const finalQuotedContent = msg.quotedContent || findQuotedMessageContent(msg.quotedMessageId);
            const messageWithQuote = { ...msg, quotedContent: finalQuotedContent };

            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ChatBubble
            return <ChatBubble key={msg.id} message={messageWithQuote} isMe={msg.fromMe || msg.senderId === userId} />;
          })}
        </React.Fragment>
      ))}
    </Box>
  );
}

function ChatInput({ value, onChange, onSend, disabled, onRewrite, isRewriting }) {
  const theme = useTheme();
  const [templates, setTemplates] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);

  // State for the rewrite options dialog
  const [dialogOpen, setDialogOpen] = useState(false);
  const [textToRewrite, setTextToRewrite] = useState(null);
  const [tone, setTone] = useState('professional');
  const [style, setStyle] = useState('friendly');
  const [length, setLength] = useState('same');


  useEffect(() => {
    const storedTemplates = JSON.parse(localStorage.getItem('messageTemplates') || '[]');
    setTemplates(storedTemplates);
  }, []);

  const handleClick = (event) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é
    const storedTemplates = JSON.parse(localStorage.getItem('messageTemplates') || '[]');
    setTemplates(storedTemplates);
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
    setTextToRewrite(null);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setTone('professional');
    setStyle('friendly');
    setLength('same');
  };

  const handleSelectTemplate = (template) => {
    setTextToRewrite(template.text);
    setDialogOpen(true);
    handleClose();
  };

  const handleImproveMessage = () => {
    if (!value.trim()) return;
    setTextToRewrite(value);
    setDialogOpen(true);
  };

  const handleConfirmRewrite = () => {
    if (!textToRewrite) return;
    onRewrite({
      text: textToRewrite,
      tone,
      style,
      length,
    });
    handleDialogClose();
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      e.preventDefault();
      if (!disabled && value.trim()) {
        onSend(e);
      }
    }
  };

  return (
    <>
      <Box
        component="form"
        onSubmit={onSend}
        sx={{
          display: 'flex',
          alignItems: 'center',
          p: 2,
          borderTop: '1px solid',
          borderColor: 'divider',
          bgcolor: 'background.paper',
          gap: 1,
        }}
      >
        <Button onClick={handleClick} disabled={disabled} variant="text" color="primary" sx={{ p: '8px 16px', minWidth: 'auto' }}>
          –®–∞–±–ª–æ–Ω
        </Button>
        <Menu
          anchorEl={anchorEl}
          open={open}
          onClose={handleClose}
        >
          {templates.length > 0 ? (
            templates.map(template => (
              <MenuItem key={template.id} onClick={() => handleSelectTemplate(template)}>
                {template.title}
              </MenuItem>
            ))
          ) : (
            <MenuItem disabled>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</MenuItem>
          )}
        </Menu>
        <TextField
          fullWidth
          multiline
          maxRows={4}
          value={value}
          onChange={onChange}
          onKeyDown={handleKeyDown}
          placeholder={isRewriting ? "–£–õ–£–ß–®–ê–ï–ú –¢–ï–ö–°–¢..." : "–í–í–ï–î–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–ï..."}
          disabled={disabled}
          autoFocus
          variant="outlined"
          size="medium"
          sx={{ 
            mr: 1,
            ml: 1,
            '& .MuiOutlinedInput-root': {
              borderRadius: '0px',
              borderWidth: '2px',
            }
          }}
          InputProps={{
            endAdornment: isRewriting && <CircularProgress size={20} sx={{ mr: 1 }} color="secondary" />
          }}
        />
        <Button onClick={handleImproveMessage} disabled={disabled || !value.trim()} variant="text" color="primary" sx={{ p: '8px 16px', minWidth: 'auto' }}>
          –£–ª—É—á—à–∏—Ç—å
        </Button>
        <Button
          type="submit"
          disabled={disabled || !value.trim()}
          color="primary"
          variant="contained"
          sx={{ p: '8px 16px', borderRadius: '20px' }}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </Button>
      </Box>
      <Dialog open={dialogOpen} onClose={handleDialogClose} fullWidth maxWidth="sm">
        <DialogTitle sx={{fontFamily: '"Press Start 2P", cursive'}}>–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç</DialogTitle>
        <DialogContent>
          <Typography variant="body1" gutterBottom sx={{ mt: 2, p: 2, bgcolor: 'action.hover', borderRadius: 1, border: '2px dashed', borderColor: 'divider' }}>
            {textToRewrite}
          </Typography>
          <FormControl fullWidth margin="normal">
            <InputLabel id="tone-select-label">–¢–æ–Ω</InputLabel>
            <Select
              labelId="tone-select-label"
              value={tone}
              label="–¢–æ–Ω"
              onChange={(e) => setTone(e.target.value)}
            >
              <MenuItem value="professional">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π</MenuItem>
              <MenuItem value="casual">–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π</MenuItem>
              <MenuItem value="humorous">–° —é–º–æ—Ä–æ–º</MenuItem>
              <MenuItem value="empathetic">–≠–º–ø–∞—Ç–∏—á–Ω—ã–π</MenuItem>
              <MenuItem value="passive-aggressive">–ü–∞—Å—Å–∏–≤–Ω–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π</MenuItem>
            </Select>
          </FormControl>
          <FormControl fullWidth margin="normal">
            <InputLabel id="style-select-label">–°—Ç–∏–ª—å</InputLabel>
            <Select
              labelId="style-select-label"
              value={style}
              label="–°—Ç–∏–ª—å"
              onChange={(e) => setStyle(e.target.value)}
            >
              <MenuItem value="professional">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π</MenuItem>
              <MenuItem value="friendly">–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</MenuItem>
              <MenuItem value="poetic">–ü–æ—ç—Ç–∏—á–Ω—ã–π</MenuItem>
              <MenuItem value="simple">–ü—Ä–æ—Å—Ç–æ–π</MenuItem>
            </Select>
          </FormControl>
          <FormControl fullWidth margin="normal">
            <InputLabel id="length-select-label">–î–ª–∏–Ω–∞</InputLabel>
            <Select
              labelId="length-select-label"
              value={length}
              label="–î–ª–∏–Ω–∞"
              onChange={(e) => setLength(e.target.value)}
            >
              <MenuItem value="shorter">–ö–æ—Ä–æ—á–µ</MenuItem>
              <MenuItem value="same">–¢–∞ –∂–µ</MenuItem>
              <MenuItem value="longer">–î–ª–∏–Ω–Ω–µ–µ</MenuItem>
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions sx={{p: '16px 24px'}}>
          <Button onClick={handleDialogClose} variant="outlined">–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleConfirmRewrite} variant="contained">–£–ª—É—á—à–∏—Ç—å</Button>
        </DialogActions>
      </Dialog>
    </>
  );
}

export default function Messenger({ onLogout }) {
  const theme = useTheme();
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');
  const [sending, setSending] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isRewriting, setIsRewriting] = useState(false);
  const [phoneInfo, setPhoneInfo] = useState(null);
  const [phoneInfoLoading, setPhoneInfoLoading] = useState(false);
  const [suggestedReplies, setSuggestedReplies] = useState([]);
  const [loadingSuggestions, setLoadingSuggestions] = useState(false);
  const lastProcessedMessageIdRef = React.useRef(null);

  useEffect(() => {
    let isMounted = true;
    const fetchChats = async () => {
      try {
        const data = await api.getChats();
        const sorted = [...data].sort((a, b) => {
          const getTime = chat => chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt || 0;
          return new Date(getTime(b)) - new Date(getTime(a));
        });
        if (isMounted) setChats(sorted);
      } catch {
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã');
        }
      }
    };
    fetchChats();
    const interval = setInterval(fetchChats, 5000);
    return () => { isMounted = false; clearInterval(interval); };
  }, []);

  useEffect(() => {
    if (!selectedChat) return;
    let isMounted = true;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
    lastProcessedMessageIdRef.current = null;
    setSuggestedReplies([]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
    setLoading(true);
    
    const fetchMessages = async (isInitial = false) => {
      try {
        const data = await api.getMessagesByChatId(selectedChat.id);
        console.log('Fetched messages:', data);
        let msgs = Array.isArray(data) ? data : data.messages;
        msgs = msgs.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        if (isMounted) {
          setMessages(msgs);
          // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          if (isInitial) {
            setLoading(false);
          }
        }
      } catch {
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
          if (isInitial) {
            setLoading(false);
          }
        }
      }
    };

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    fetchMessages(true);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const interval = setInterval(() => {
      fetchMessages(false);
    }, 5000);
    
    return () => { 
      isMounted = false; 
      clearInterval(interval); 
    };
  }, [selectedChat]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (!messages || messages.length === 0) {
      setSuggestedReplies([]);
      return;
    }

    const lastMessage = messages[messages.length - 1];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    // 2. –û–Ω–æ –Ω–µ –æ—Ç –Ω–∞—Å
    // 3. –ú—ã –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (lastMessage && !lastMessage.fromMe && lastMessage.id !== lastProcessedMessageIdRef.current) {
      const generateReplies = async () => {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã *–Ω–∞—á–∏–Ω–∞–µ–º* –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        const messageIdToProcess = lastMessage.id;
        lastProcessedMessageIdRef.current = messageIdToProcess;
        setLoadingSuggestions(true);
        
        try {
          const context = localStorage.getItem('aiContext') || '';
          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          const history = messages.slice(-5);
          const replies = await api.suggestRepliesWithGemini(history, context);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (lastProcessedMessageIdRef.current === messageIdToProcess) {
            setSuggestedReplies(replies);
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", error);
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
        } finally {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (lastProcessedMessageIdRef.current === messageIdToProcess) {
            setLoadingSuggestions(false);
          }
        }
      };
      generateReplies();
    } else if (lastMessage && lastMessage.fromMe) {
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å, –æ—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      setSuggestedReplies([]);
    }
  }, [messages]);


  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
  useEffect(() => {
    if (!selectedChat) {
      setPhoneInfo(null);
      return;
    }

    let isMounted = true;

    const fetchPhoneInfo = async () => {
      try {
        setPhoneInfoLoading(true);
        const phones = await api.getOrganizationPhones();
        const phoneId = selectedChat.organizationPhone?.id || selectedChat.organizationPhoneId;
        const phone = phones.find(p => p.id === phoneId);
        if (isMounted) {
          if (phone) {
            setPhoneInfo(phone);
          }
          setPhoneInfoLoading(false);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:', err);
        if (isMounted) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
          setPhoneInfoLoading(false);
        }
      }
    };

    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    fetchPhoneInfo();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchPhoneInfo, 10000);

    return () => {
      isMounted = false;
      clearInterval(interval);
    };
  }, [selectedChat]);

  const handleRewrite = async (options) => {
    const { text, tone, style, length } = options;
    if (!text) return;

    setIsRewriting(true);
    try {
      const geminiApiKey = localStorage.getItem('geminiApiKey');
      if (!geminiApiKey) {
        alert('API –∫–ª—é—á –¥–ª—è Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        setIsRewriting(false);
        return;
      }
      const rewrittenText = await api.rewriteWithGemini(text, tone, style, length);
      setMessage(rewrittenText);
      alert('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω!');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
      if (error.message && error.message.includes('429')) {
          alert('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç.');
      }
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
      setMessage(text);
    } finally {
      setIsRewriting(false);
    }
  };

  const handleSendMessage = async (e) => {
    if (e) e.preventDefault();
    if (!message.trim() || !selectedChat) return;

    setSending(true);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const geminiApiKey = localStorage.getItem('geminiApiKey');
      if (geminiApiKey) {
        const analysis = await api.analyzeMessageWithGemini(message);
        if (analysis.has_errors || analysis.is_inappropriate) {
          let warningMessage = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: ";
          const issues = [];
          if (analysis.has_errors) issues.push("–æ—à–∏–±–∫–∏");
          if (analysis.is_inappropriate) issues.push("–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞");
          warningMessage += issues.join(', ') + ".";
          alert(warningMessage);
          // –ú—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        }
      }

      // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const organizationPhoneId = selectedChat.organizationPhone?.id || selectedChat.organizationPhoneId;
      const receiverJid = selectedChat.remoteJid;
      
      if (!organizationPhoneId || !receiverJid) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
      
      const sentMessage = await api.sendTextMessage({ 
        organizationPhoneId, 
        receiverJid, 
        text: message 
      });
      
      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setMessages(prev => [...prev, sentMessage]);
      setMessage('');
      setSuggestedReplies([]); // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      lastProcessedMessageIdRef.current = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       const updatedChats = await api.getChats();
       const sorted = [...updatedChats].sort((a, b) => {
         const getTime = chat => chat.lastMessage?.timestamp || chat.lastMessageAt || chat.createdAt || 0;
         return new Date(getTime(b)) - new Date(getTime(a));
       });
       setChats(sorted);


    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } finally {
      setSending(false);
    }
  };

  const handleSelectChat = (chat) => {
    setSelectedChat(chat);
  };

  return (
    <Box sx={{ display: 'flex', height: '100vh', bgcolor: 'background.default' }}>
      <ChatSidebar
        chats={chats}
        selectedChat={selectedChat}
        onSelect={handleSelectChat}
      />
      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', height: '100vh' }}>
        <TopBar onLogout={onLogout} />
        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'row', overflow: 'hidden' }}>
          <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', bgcolor: 'background.default' }}>
            {selectedChat ? (
              <>
                <ChatMessages messages={messages} userId={null} loading={loading} />
                {loadingSuggestions && (
                  <Box sx={{ px: 2, py: 1, display: 'flex', alignItems: 'center', gap: 1, justifyContent: 'center' }}>
                    <CircularProgress size={20} />
                    <Typography variant="caption" color="text.secondary">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏...</Typography>
                  </Box>
                )}
                {suggestedReplies.length > 0 && (
                  <Box sx={{ p: 1, display: 'flex', gap: 1, flexWrap: 'wrap', justifyContent: 'center', borderTop: '1px solid', borderColor: 'divider' }}>
                    {suggestedReplies.map((reply, index) => (
                      <Button key={index} variant="outlined" size="small" onClick={() => setMessage(reply)}>
                        {reply}
                      </Button>
                    ))}
                  </Box>
                )}
                <ChatInput
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onSend={handleSendMessage}
                  disabled={sending || isRewriting}
                  onRewrite={handleRewrite}
                  isRewriting={isRewriting}
                />
              </>
            ) : (
              <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                <Typography variant="h6" color="text.secondary">
                  –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
                </Typography>
              </Box>
            )}
          </Box>
          <ChatInfoSidebar chat={selectedChat} phoneInfo={phoneInfo} loading={phoneInfoLoading} />
        </Box>
      </Box>
    </Box>
  );
}
